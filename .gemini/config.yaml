# Config for the Gemini Pull Request Review Bot.
# https://github.com/marketplace/gemini-code-assist
have_fun: true 
code_review:
  disable: false
  comment_severity_threshold: 'false'
  max_review_comments: -1
  pull_request_opened:
    help: false
    summary: true
    code_review: true
ignore_patterns: []

#!/bin/bash/sh
https://github.com/github/docs/tree/main
https://openai.com/index/gpt-4-1/
from cart_item import CartItem
from order import Order
const ttl = `${2 * 3600}s`; // 2 hours in seconds
const updatedCache = await ai.caches.update({
  name: cache.name,
  config: { ttl },
});
console.log("After update (TTL):", updatedCache);
class Cart:
    def __init__(self, cart_id, user_id):
        self.cart_id = cart_id
        self.user_id = user_id
        self.items = []

    def add_item(self, item):
        self.items.append(item)

    def remove_item(self, item):
        self.items = [i for i in self.items if i != item]

    def calculate_total(self):
        return sum(item.quantity * item.product.price for item in self.items)

    def place_order(self):
        # Implementation for placing an order
        return Order("", None, 0)
 {% data variables.copilot.copilot_gpt_41 %} is a good fit{
  "handle": "com.oxchat.nostr",
  "uaid": "{% data variables.copilot.copilot_gpt_41 %}"
}import { GoogleGenAI } from "@google/genai";

const ai = new GoogleGenAI({});

async function main() {
  const response = await ai.models.generateContent({
    model: "gemini-2.5-flash",
    contents: "How does AI work?",
  });
  console.log(response.text);
}

await main();const ttl = `${2 * 3600}s`; // 2 hours in seconds
const updatedCache = await ai.caches.update({
  name: cache.name,
  config: { ttl },
});
console.log("After update (TTL):", updatedCache);ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY =========================================================
# 🚀 SCRIPT AUTO-DEPLOY UNTUK PROJEK REALITY FORGE
# Dibuat untuk Google Cloud (Debian/Ubuntu)
# =========================================================

# 1. ⚙️ Kemaskini sistem dan pasang perisian asas
echo "🌐 Memulakan proses deploy..."
echo "📦 Mengemas kini sistem dan memasang pakej-pakej asas..."
sudo apt-get update -y
sudo apt-get install -y git curl

# Pasang Node.js (versi LTS)
curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
sudo apt-get install -y nodejs

# Pasang Python dan PIP
sudo apt-get install -y python3 python3-pip

# 2. 📁 Clone projek dari Git
echo "📂 Mengklon projek Reality Forge dari Git..."
PROJECT_DIR="$HOME/reality-forge"
if [ -d "$PROJECT_DIR" ]; then
    echo "Amaran: Projek sudah ada. Membuang folder lama..."
    rm -rf "$PROJECT_DIR"
fi
git clone https://github.com/wan-adni-supremacy-2025-v2/reality-forge.git "$PROJECT_DIR"

if [ ! -d "$PROJECT_DIR" ]; then
    echo "Ralat: Gagal mengklon repositori Git. Sila periksa URL."
    exit 1
fi
cd "$PROJECT_DIR" || { echo "Ralat: Gagal masuk ke direktori projek. Keluar..."; exit 1; }

# 3. ✨ Pasang kebergantungan (dependencies)
echo "📦 Memasang pustaka Node.js..."
npm install

echo "✨ Memasang pustaka Python..."
pip3 install qiskit

# 4. 🚀 Pasang dan lancarkan servis dengan PM2
echo "⚙️ Memasang PM2 secara global..."
npm install -g pm2

echo "🚀 Melancarkan servis Reality Forge dengan PM2..."
# Pastikan fail .env ada, atau buat baru kalau tak ada
if [ ! -f .env ]; then
    echo "Membuat fail .env..."
    cat > .env <<'EOF'
REALITY_CORE_API_KEY=wan-adni-supremacy-2025-v2
HUB_API_KEY=change-me-quantum-key
HUB_NAME=Kelate-Nexus-Forge
AVSD_BASE_URL=http://localhost:7012
AVSD_WEBHOOK=/dispatch
QSHOTS=1024
QUANTUM_AMPLIFIER_ALGORITHM="Placeholder_V1"
MAX_CAPACITY_KWH=500000
LOSS_PERCENT=1.2
PORT_ENERGY_HUB=7012
PORT_NEXUS_CORE=3001
PORT_QCLOUD=3002
EOF
fi

pm2 start ecosystem.config.js
pm2 save

echo "✅ Tahniah! Projek Quantum Genesis: The Reality Forge telah berjaya di-deploy!"
echo "Status servis PM2:"
pm2 status
